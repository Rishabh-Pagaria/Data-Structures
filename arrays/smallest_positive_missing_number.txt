Problem
Find the smallest positive missing number in the given array.
Example: [0, -10, 1, 3, -20], Ans = 2

Thinking
So if we had that element, it could be easy for us to tell the element is there. But here we ahve to find the smallest missing value.
What we can do it create an another array check[] of type bool, which will keep a check that if that element of arr[] is there or not.

Steps
1. Build the Check[ ] array initialized with False at all indices.
2. By iterating over the array and marking non-negative a[i] as true i.e.

if(a[i] >= 0)
check[a[i]] = True

3. Iterate in the Check[ ] from i=1, BREAK the loop when you find check[i] =
False and store that i in the ans variable.
4. Output the ans.

Code:
#include <iostream>
using namespace std;

int main(){
    int n;
    cin>>n;
    int a[n];
    for(int i = 0; i < n; i++){
        cin>>a[i];
    }
    const int N = 1e6 + 2;
    bool check[N];
    for(int i=0; i < N; i++){
        check[i] = 0;
    }
    for(int i = 0; i< n;i++){
        if(a[i] >= 0){
            check[a[i]] = 1;
        }
    }
    for(int i = 0; i < N; i++){
        if(check[i] == 0){
            cout<<i;
            break;
        }
    }
    return 0;
}
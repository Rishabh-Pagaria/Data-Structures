Problem
An arithmetic array is an array that contains at least two integers and the
differences between consecutive integers are equal. For example, [9, 10], [3, 3, 3],
and [9, 7, 5, 3] are arithmetic arrays, while [1, 3, 3, 7], [2, 1, 2], and [1, 2, 4] are
not arithmetic arrays.

Sarasvati has an array of N non-negative integers. The i-th integer of the array is
Ai. She wants to choose a contiguous arithmetic subarray from her array that has
the maximum length. Please help her to determine the length of the longest
contiguous arithmetic subarray.

Input
The first line of the input gives the number of test cases, T. T test cases follow.
Each test case begins with a line containing the integer N. The second line
contains N integers. The i-th integer is Ai.

Test case
ar[] = {10, 7, 4, 6, 8, 10, 11};
Output = 4
Explanation 4,6,8,10 has the common difference of 2 and it's the largest subarray with length 4.

**********************************************************************************************************************************
Steps: 
* There would be a need of a variable pd(common difference) in order to compare it with current common difference(a[i] - a[i-1])
* Initialize the curr variable to store the value for current arithmetic subarray length.
* Max subarray length(max) denotes the max length till a[i]
* While iteration there would be 2 cases:
    a. Increase the curr by 1 if a[i] - a[i-1] == pd
    b. ans = max(curr, ans)

***********************************************************************************************************************************
Code : 
#include <iostream>
using namespace std;

int main(){
    int n;
    cin >>n;
    int a[n];
    // take the input
    for(int i =0; i<n;i++){
        cin>>a[i];
    }
    // as the initially common difference has been taken and Initialized to d. So, that's why j is starting from 2
    // and because of the same reason the curr has been Initialized by 2
    int ans = 0, d = a[1] - a[0], j = 2, curr = 2;

    while (j <= n)
    {
        if(a[j] - a[j-1] == d){
            curr++;
        }
        else{
            d = a[j] - a[j-1];
            curr = 2;
        }
        ans = max(ans, curr);
        j++;
    }
    cout<<ans<<endl;
    return 0;
    
}